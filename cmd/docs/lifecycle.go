// Copyright 2019 HAProxy Technologies LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"log"
	"strings"

	"github.com/google/renameio"
)

type SupportVersion struct {
	Version string   `yaml:"version"`
	GA      string   `yaml:"ga"`
	MinEOL  string   `yaml:"min_eol"`
	HAProxy string   `yaml:"haproxy"`
	K8S     []string `yaml:"k8s"`
}

type Support struct {
	Versions []*SupportVersion `yaml:"versions"`
}

func (c *Conf) generateSupport() {
	var buff strings.Builder
	buff.WriteString(title)
	// buff.WriteString(headerREADME)
	buff.WriteByte('\n')
	buff.WriteByte('\n')
	buff.WriteString(`### Lifecycle`)
	buff.WriteByte('\n')
	buff.WriteByte('\n')
	buff.WriteString(`| Version | GA | EOL | HAProxy | *k8s versions |`)
	buff.WriteByte('\n')
	buff.WriteString(`| -:|:-:|:-:|:-:|:-:|`)
	buff.WriteByte('\n')

	for _, version := range c.Support {
		if version.HAProxy == "" {
			version.HAProxy = version.Version
		}
		buff.WriteString(fmt.Sprintf(`| **%s** | %s | %s | %s | %s |`, version.Version, version.GA, version.MinEOL, version.HAProxy, strings.Join(version.K8S, ", ")))
		buff.WriteByte('\n')
	}

	buff.WriteByte('\n')
	buff.WriteString(`**Note:** for specific version of controller, only k8s versions that are thoroughly tested with that version are listed`)
	buff.WriteByte('\n')
	buff.WriteByte('\n')
	buff.WriteString(`This is autogenerated from [lifecycle.yaml](lifecycle.yaml). Description can be found in [generator readme](gen/README.md)`)
	buff.WriteByte('\n')

	err := renameio.WriteFile("../../documentation/lifecycle.md", []byte(buff.String()), 0o644)
	if err != nil {
		log.Println(err)
	}
}
